# -*- coding: utf-8 -*-
"""Functional Programming .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGH5mHRC2-2urW6_j1zR_baLjhZG656w
"""

from typing import List, NamedTuple

# 1. Final data structures
class ComicCharacter(NamedTuple):
    name: str
    role: str

# Sample data
characters: List[ComicCharacter] = [
    ComicCharacter("Spider-Man", "Superhero"),
    ComicCharacter("Joker", "Villain"),
    ComicCharacter("Wonder Woman", "Superhero"),
]

# 2. Side-effect-free functions
def filter_characters(characters: List[ComicCharacter], role: str) -> List[ComicCharacter]:
    return list(filter(lambda c: c.role == role, characters))

# 3. Use of higher-order functions
def transform_names(characters: List[ComicCharacter], transform_function):
    return [transform_function(character.name) for character in characters]

# 4. Functions as parameters and return values
def create_character(name: str, role: str, transformation_function):
    transformed_name = transformation_function(name)
    return ComicCharacter(transformed_name, role)

def add_prefix(name: str) -> str:
    return f"Mr. {name}"

# 5. Use of closures/anonymous functions
def create_name_modifier(prefix):
    return lambda name: f"{prefix} {name}"

# Additional points:

# 6. Immutable data structures
immutable_characters = tuple(characters)

# 7. Recursion
def recursive_name_length(name: str) -> int:
    if not name:
        return 0
    return 1 + recursive_name_length(name[1:])

# Usage
filtered_villains = filter_characters(characters, "Villain")
uppercase_names = transform_names(characters, lambda name: name.upper())
new_character = create_character("Batman", "Superhero", add_prefix)
add_sir = create_name_modifier("Sir")
modified_names = transform_names(characters, add_sir)
name_length = recursive_name_length("Spider-Man")

# Print results
print("Filtered Villains:", filtered_villains)
print("Uppercase Names:", uppercase_names)
print("New Character:", new_character)
print("Modified Names:", modified_names)
print("Name Length:", name_length)